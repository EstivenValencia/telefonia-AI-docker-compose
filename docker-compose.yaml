# Docker compose for launching Kafka Server

version: "3"

networks:
  inference-ai:
    driver: bridge

services:
# We create all services related to Kafka (Event and Data distribution)
  zookeeper:
    restart: always
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "22181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - './docker-kafka-server/storage/zookeeper/data:/var/lib/zookeeper/data'
      - './docker-kafka-server/storage/zookeeper/log:/var/lib/zookeeper/log'
    networks:
      - inference-ai
    
  kafka:
    restart: always
    container_name: kafka
    image: confluentinc/cp-kafka:latest
    ports:
      - "29092:29092"
      - "29093:29093"
    environment:
      KAFKA_BROKER_ID: 1      
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: EXTERNAL_SAME_HOST://:29092,EXTERNAL_DIFFERENT_HOST://:29093,INTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL_SAME_HOST://localhost:29092,EXTERNAL_DIFFERENT_HOST://192.168.5.242:29093 # Change last ip by the server (core) ip
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL_SAME_HOST:PLAINTEXT,EXTERNAL_DIFFERENT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL      
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1      
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    volumes:
      - './docker-kafka-server/storage/kafka/data:/var/lib/kafka/data'
      - './docker-kafka-server/storage/secrets:/etc/kafka/secrets'
    networks:
      inference-ai:
        aliases:
          - kafka
    depends_on:
      - zookeeper

  kafdrop:
    restart: always
    container_name: kafdrop
    platform: linux/amd64 # Needed for running in Mac Silicon (remember to activate Roseta emulation in settings - Docker)
    image: obsidiandynamics/kafdrop:latest  
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
    networks:
      - inference-ai
    depends_on:
      zookeeper:
        condition: service_started
      kafka:
        condition: service_started

  # Contendor consumidor de kafka para inferencia
  kafka-topics:
    restart: always
    container_name: kafka-topics
    image: kafka-topics:1.0.0
    volumes:
      - '/mnt/d/home-2/Documentos/master/cloud_computer/docker-practice/models:/usr/local/app/models'
    networks:
      inference-ai:
        aliases:
          - kafka-topics
    depends_on:
      - kafka


  # Contendor consumidor de REST para inferencia
  api-rest:
    restart: always
    container_name: rest
    image: rest:1.0.0
    volumes:
      - '/mnt/d/home-2/Documentos/master/cloud_computer/docker-practice/models:/usr/local/app/models'
    networks:
      inference-ai:
        aliases:
          - rest
    ports:
      - "8000:8000"

  # Contendor consumidor de gRPC para inferencia
  grpc:
    restart: always
    container_name: grpc
    image: grpc:1.0.0
    volumes:
      - '/mnt/d/home-2/Documentos/master/cloud_computer/docker-practice/models:/usr/local/app/models'
    networks:
      inference-ai:
        aliases:
          - grpc
    ports:
      - "50051:50051"
